{"ast":null,"code":"import { configureStore, combineReducers } from \"@reduxjs/toolkit\";\nimport thunk from \"redux-thunk\";\nimport { userLoginReducer, userRegisterReducer, userDetailsReducer, userUpdateProfileReducer } from \"./reducers/userReducers\";\n\n// npm install react-bootstrap axios react-router-dom redux react-redux redux-thunk redux-devtools-extension @reduxjs/toolkit   \n\nconst reducer = combineReducers({\n  userLogin: userLoginReducer,\n  userRegister: userRegisterReducer,\n  userDetails: userDetailsReducer,\n  userUpdateProfile: userUpdateProfileReducer\n});\nconst userInfoFromStorage = localStorage.getItem('userInfo') ? JSON.parse(localStorage.getItem('userInfo')) : null;\n//get the user info from local storage if it exists, otherwise set it to null, then pass it into the initial state\n\nexport const initialState = {\n  userLogin: {\n    userInfo: userInfoFromStorage\n  }\n}; //this is where we will add initial state, this is the state that will be used when the app is first loaded\n\nconst middleware = [thunk]; //thunk is a middleware that allows us to make asynchronous requests in our actions\n\nconst store = configureStore({\n  reducer: reducer,\n  preloadedState: initialState,\n  middleware: middleware\n});\nexport default store;","map":{"version":3,"names":["configureStore","combineReducers","thunk","userLoginReducer","userRegisterReducer","userDetailsReducer","userUpdateProfileReducer","reducer","userLogin","userRegister","userDetails","userUpdateProfile","userInfoFromStorage","localStorage","getItem","JSON","parse","initialState","userInfo","middleware","store","preloadedState"],"sources":["/Users/jacoblim/Desktop/HawkHub/frontend/src/store.js"],"sourcesContent":["import { configureStore, combineReducers } from \"@reduxjs/toolkit\";\nimport thunk from \"redux-thunk\";\nimport { userLoginReducer, userRegisterReducer, userDetailsReducer, userUpdateProfileReducer} from \"./reducers/userReducers\";\n\n// npm install react-bootstrap axios react-router-dom redux react-redux redux-thunk redux-devtools-extension @reduxjs/toolkit   \n\nconst reducer = combineReducers({\n    userLogin: userLoginReducer,\n    userRegister: userRegisterReducer,\n    userDetails: userDetailsReducer,\n    userUpdateProfile: userUpdateProfileReducer\n});\n\nconst userInfoFromStorage = localStorage.getItem('userInfo') ? JSON.parse(localStorage.getItem('userInfo')) : null \n//get the user info from local storage if it exists, otherwise set it to null, then pass it into the initial state\n\nexport const initialState = {\n    userLogin: { userInfo: userInfoFromStorage }\n} //this is where we will add initial state, this is the state that will be used when the app is first loaded\n\nconst middleware = [thunk] //thunk is a middleware that allows us to make asynchronous requests in our actions\n\nconst store = configureStore({\n    reducer: reducer,\n    preloadedState: initialState,\n    middleware: middleware,\n});\n \nexport default store;\n"],"mappings":"AAAA,SAASA,cAAc,EAAEC,eAAe,QAAQ,kBAAkB;AAClE,OAAOC,KAAK,MAAM,aAAa;AAC/B,SAASC,gBAAgB,EAAEC,mBAAmB,EAAEC,kBAAkB,EAAEC,wBAAwB,QAAO,yBAAyB;;AAE5H;;AAEA,MAAMC,OAAO,GAAGN,eAAe,CAAC;EAC5BO,SAAS,EAAEL,gBAAgB;EAC3BM,YAAY,EAAEL,mBAAmB;EACjCM,WAAW,EAAEL,kBAAkB;EAC/BM,iBAAiB,EAAEL;AACvB,CAAC,CAAC;AAEF,MAAMM,mBAAmB,GAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,GAAGC,IAAI,CAACC,KAAK,CAACH,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,CAAC,GAAG,IAAI;AAClH;;AAEA,OAAO,MAAMG,YAAY,GAAG;EACxBT,SAAS,EAAE;IAAEU,QAAQ,EAAEN;EAAoB;AAC/C,CAAC,EAAC;;AAEF,MAAMO,UAAU,GAAG,CAACjB,KAAK,CAAC,EAAC;;AAE3B,MAAMkB,KAAK,GAAGpB,cAAc,CAAC;EACzBO,OAAO,EAAEA,OAAO;EAChBc,cAAc,EAAEJ,YAAY;EAC5BE,UAAU,EAAEA;AAChB,CAAC,CAAC;AAEF,eAAeC,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}