[{"/Users/jacoblim/Desktop/HawkHub/frontend/src/index.js":"1","/Users/jacoblim/Desktop/HawkHub/frontend/src/store.js":"2","/Users/jacoblim/Desktop/HawkHub/frontend/src/App.js":"3","/Users/jacoblim/Desktop/HawkHub/frontend/src/screens/ProfileScreen.js":"4","/Users/jacoblim/Desktop/HawkHub/frontend/src/screens/RegisterScreen.js":"5","/Users/jacoblim/Desktop/HawkHub/frontend/src/screens/LoginScreen.js":"6","/Users/jacoblim/Desktop/HawkHub/frontend/src/screens/HomeScreen.js":"7","/Users/jacoblim/Desktop/HawkHub/frontend/src/reducers/userReducers.js":"8","/Users/jacoblim/Desktop/HawkHub/frontend/src/components/Header.js":"9","/Users/jacoblim/Desktop/HawkHub/frontend/src/components/Footer.js":"10","/Users/jacoblim/Desktop/HawkHub/frontend/src/components/FormContainer.js":"11","/Users/jacoblim/Desktop/HawkHub/frontend/src/components/Loader.js":"12","/Users/jacoblim/Desktop/HawkHub/frontend/src/actions/userActions.js":"13","/Users/jacoblim/Desktop/HawkHub/frontend/src/components/Message.js":"14","/Users/jacoblim/Desktop/HawkHub/frontend/src/constants/userConstants.js":"15","/Users/jacoblim/Desktop/HawkHub/frontend/src/components/Sidebar.js":"16"},{"size":504,"mtime":1686142807284,"results":"17","hashOfConfig":"18"},{"size":1231,"mtime":1685122750923,"results":"19","hashOfConfig":"18"},{"size":937,"mtime":1686149868757,"results":"20","hashOfConfig":"18"},{"size":4605,"mtime":1685122889276,"results":"21","hashOfConfig":"18"},{"size":4586,"mtime":1685266034744,"results":"22","hashOfConfig":"18"},{"size":4108,"mtime":1685121045050,"results":"23","hashOfConfig":"18"},{"size":141,"mtime":1686150119326,"results":"24","hashOfConfig":"18"},{"size":2653,"mtime":1686110315135,"results":"25","hashOfConfig":"18"},{"size":2871,"mtime":1686164570492,"results":"26","hashOfConfig":"18"},{"size":334,"mtime":1686128320919,"results":"27","hashOfConfig":"18"},{"size":331,"mtime":1686128721293,"results":"28","hashOfConfig":"18"},{"size":282,"mtime":1686134130469,"results":"29","hashOfConfig":"18"},{"size":4935,"mtime":1686124083710,"results":"30","hashOfConfig":"18"},{"size":227,"mtime":1686134458909,"results":"31","hashOfConfig":"18"},{"size":941,"mtime":1685120984981,"results":"32","hashOfConfig":"18"},{"size":866,"mtime":1686201192511,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"12duzb3",{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"40"},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"40"},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"40"},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"80","messages":"81","suppressedMessages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"83","messages":"84","suppressedMessages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/jacoblim/Desktop/HawkHub/frontend/src/index.js",[],[],"/Users/jacoblim/Desktop/HawkHub/frontend/src/store.js",[],[],[],"/Users/jacoblim/Desktop/HawkHub/frontend/src/App.js",[],[],"/Users/jacoblim/Desktop/HawkHub/frontend/src/screens/ProfileScreen.js",["86","87","88","89","90","91"],[],"import React, { useState, useEffect } from 'react'\nimport { Link, useNavigate } from 'react-router-dom'\nimport { Form, Button, Row, Col, Table } from 'react-bootstrap'\nimport { LinkContainer } from 'react-router-bootstrap'\nimport { useDispatch, useSelector } from 'react-redux'\nimport Loader from '../components/Loader'\nimport Message from '../components/Message'\nimport { getUserDetails, updateUserProfile } from '../actions/userActions'\nimport { USER_UPDATE_PROFILE_RESET } from '../constants/userConstants'\n\nfunction ProfileScreen({ }) {\n\n    const [name, setName] = useState('')\n    const [email, setEmail] = useState('')\n    const [password, setPassword] = useState('')\n    const [confirmPassword, setConfirmPassword] = useState('')\n    const [message, setMessage] = useState('')\n\n    const dispatch = useDispatch()\n    const navigate = useNavigate();\n\n    const userDetails = useSelector(state => state.userDetails)\n    const { error, loading, user } = userDetails \n\n    const userLogin = useSelector(state => state.userLogin)\n    const { userInfo } = userLogin\n\n    const userUpdateProfile = useSelector(state => state.userUpdateProfile)\n    const { success } = userUpdateProfile\n\n    useEffect(() => {\n        if (!userInfo) {\n            navigate('/login')\n        } else {\n            if (!user || !user.name || success) {\n                dispatch({ type: USER_UPDATE_PROFILE_RESET })\n                dispatch(getUserDetails('profile'))\n            } else {\n                setName(user.name)\n                setEmail(user.email)\n            }\n        }\n    }, [dispatch, navigate, userInfo, user])\n\n    const submitHandler = (e) => {\n        e.preventDefault()\n\n        if (password != confirmPassword) {\n            setMessage('Passwords do not match')\n        } else {\n            dispatch(updateUserProfile({ //updateUserProfile takes in an object which has properties of name, email, password, and _id\n                'id': user._id,\n                'name': name,\n                'email': email,\n                'password': password\n            }))\n            setMessage('')\n        }\n\n    }\n    return (\n        <Row>\n            <Col md={3}>\n                <h2>User Profile</h2>\n\n                {message && <Message variant='danger'>{message}</Message>}\n                {error && <Message variant='danger'>{error}</Message>}\n                {loading && <Loader />}\n                <Form onSubmit={submitHandler}>\n\n                    <Form.Group controlId='name'>\n                        <Form.Label>Name</Form.Label>\n                        <Form.Control\n                            required\n                            type='name'\n                            placeholder='Enter name'\n                            value={name}\n                            onChange={(e) => setName(e.target.value)}\n                        >\n                        </Form.Control>\n                    </Form.Group>\n\n                    <Form.Group controlId='email'>\n                        <Form.Label>Email Address</Form.Label>\n                        <Form.Control\n                            required\n                            type='email'\n                            placeholder='Enter Email'\n                            value={email}\n                            onChange={(e) => setEmail(e.target.value)}\n                        >\n                        </Form.Control>\n                    </Form.Group>\n\n                    <Form.Group controlId='password'>\n                        <Form.Label>Password</Form.Label>\n                        <Form.Control\n\n                            type='password'\n                            placeholder='Enter Password'\n                            value={password}\n                            onChange={(e) => setPassword(e.target.value)}\n                        >\n                        </Form.Control>\n                    </Form.Group>\n\n                    <Form.Group controlId='passwordConfirm'>\n                        <Form.Label>Confirm Password</Form.Label>\n                        <Form.Control\n\n                            type='password'\n                            placeholder='Confirm Password'\n                            value={confirmPassword}\n                            onChange={(e) => setConfirmPassword(e.target.value)}\n                        >\n                        </Form.Control>\n                    </Form.Group>\n\n                    <Button type='submit' variant='primary'>\n                        Update\n                </Button>\n\n                </Form>\n            </Col>\n        </Row>\n    )\n}\n\nexport default ProfileScreen","/Users/jacoblim/Desktop/HawkHub/frontend/src/screens/RegisterScreen.js",["92","93","94"],[],"import React, { useState, useEffect } from 'react'\nimport { Link, useLocation, useNavigate } from 'react-router-dom'\nimport { Form, Button, Row, Col } from 'react-bootstrap'\nimport { useDispatch, useSelector } from 'react-redux'\nimport Loader from '../components/Loader'\nimport Message from '../components/Message'\nimport FormContainer from '../components/FormContainer'\nimport { login, register } from '../actions/userActions'\n\nfunction RegisterScreen({ }) {\n\n    const [name, setName] = useState('')\n    const [email, setEmail] = useState('')\n    const [password, setPassword] = useState('')\n    const [confirmPassword, setConfirmPassword] = useState('')\n    const [message, setMessage] = useState('')\n\n    const dispatch = useDispatch()\n    const location = useLocation(); //useLocation is a hook that returns the location object that represents the current URL, it is similar to history, but it has more information, such as the query string\n    const navigate = useNavigate(); //useNavigate is a hook that returns a navigate function, which is used to navigate to a new location, it is similar to history.push, but it has more functionality, such as the ability to navigate to a new location without adding a new entry into the history stack, which is useful for redirects\n    const redirect = location.search ? location.search.split('=')[1] : '/' \n\n    const userRegister = useSelector(state => state.userRegister)\n    const { error, loading, userInfo } = userRegister\n\n    useEffect(() => {\n        if (userInfo) {\n            navigate(redirect)\n        }\n    }, [navigate, userInfo, redirect])\n\n    const submitHandler = (e) => {  //this function is called when the form is submitted, e represents the event\n        e.preventDefault()\n\n        if (password != confirmPassword) {\n            setMessage('Passwords do not match')\n        } else {\n            dispatch(register(name, email, password)) //register is from userActions.js\n        }\n\n    }\n\n    return (\n        <FormContainer>\n            <h1>Sign In</h1>\n            {message && <Message variant='danger'>{message}</Message>}\n            {error && <Message variant='danger'>{error}</Message>}\n            {loading && <Loader />}\n            <Form onSubmit={submitHandler}>\n\n                <Form.Group controlId='name'>\n                    <Form.Label>Name</Form.Label>\n                    <Form.Control\n                        required\n                        type='name'\n                        placeholder='Enter name'\n                        value={name}\n                        onChange={(e) => setName(e.target.value)}\n                    >\n                    </Form.Control>\n                </Form.Group>\n\n                <Form.Group controlId='email'>\n                    <Form.Label>Email Address</Form.Label>\n                    <Form.Control\n                        required\n                        type='email'\n                        placeholder='Enter Email'\n                        value={email}\n                        onChange={(e) => setEmail(e.target.value)}\n                    >\n                    </Form.Control>\n                </Form.Group>\n\n                <Form.Group controlId='password'>\n                    <Form.Label>Password</Form.Label>\n                    <Form.Control\n                        required\n                        type='password'\n                        placeholder='Enter Password'\n                        value={password}\n                        onChange={(e) => setPassword(e.target.value)}\n                    >\n                    </Form.Control>\n                </Form.Group>\n\n                <Form.Group controlId='passwordConfirm'>\n                    <Form.Label>Confirm Password</Form.Label>\n                    <Form.Control\n                        required\n                        type='password'\n                        placeholder='Confirm Password'\n                        value={confirmPassword}\n                        onChange={(e) => setConfirmPassword(e.target.value)}\n                    >\n                    </Form.Control>\n                </Form.Group>\n\n                <Button type='submit' variant='primary'>\n                    Register\n                </Button>\n\n            </Form>\n\n            <Row className='py-3'>\n                <Col>\n                    Have an Account? <Link \n                        to={redirect ? `/login?redirect=${redirect}` : '/login'}>\n                        Sign In\n                        </Link>\n                </Col>\n            </Row>\n        </FormContainer >\n    )\n}\n\nexport default RegisterScreen\n ","/Users/jacoblim/Desktop/HawkHub/frontend/src/screens/LoginScreen.js",[],[],"/Users/jacoblim/Desktop/HawkHub/frontend/src/screens/HomeScreen.js",[],[],"/Users/jacoblim/Desktop/HawkHub/frontend/src/reducers/userReducers.js",[],[],"/Users/jacoblim/Desktop/HawkHub/frontend/src/components/Header.js",["95","96"],[],"/Users/jacoblim/Desktop/HawkHub/frontend/src/components/Footer.js",[],[],"/Users/jacoblim/Desktop/HawkHub/frontend/src/components/FormContainer.js",[],[],"/Users/jacoblim/Desktop/HawkHub/frontend/src/components/Loader.js",[],[],"/Users/jacoblim/Desktop/HawkHub/frontend/src/actions/userActions.js",["97"],[],"import axios from \"axios\";\n\nimport {\n    USER_LOGIN_REQUEST,\n    USER_LOGIN_SUCCESS,\n    USER_LOGIN_FAIL,\n\n    USER_LOGOUT,\n\n    USER_REGISTER_REQUEST,\n    USER_REGISTER_SUCCESS,\n    USER_REGISTER_FAIL,\n\n    USER_DETAILS_REQUEST,\n    USER_DETAILS_SUCCESS,\n    USER_DETAILS_FAIL,\n    USER_DETAILS_RESET,\n\n    USER_UPDATE_PROFILE_REQUEST,\n    USER_UPDATE_PROFILE_SUCCESS,\n    USER_UPDATE_PROFILE_FAIL,\n    USER_UPDATE_PROFILE_RESET,\n\n} from \"../constants/userConstants\";\n\nexport const login = (email, password) => async (dispatch) => { //this is an action creator, it is a function that returns another function\n    try { //try to dispatch the following actions\n        dispatch({ type: USER_LOGIN_REQUEST }); //dispatch an action with type USER_LOGIN_REQUEST\n        const config = { //create a config object\n            headers: { //set the headers of the config object\n                \"Content-type\": \"application/json\", //set the content type to application/json\n            },\n        };\n        const { data } = await axios.post( //make a request to the backend to login\n            \"/api/users/login/\", //the url to make the request to\n            { 'username': email, 'password': password },\n            config //pass in the config object\n        );\n        dispatch({\n            type: USER_LOGIN_SUCCESS,\n            payload: data\n        })\n\n        localStorage.setItem('userInfo', JSON.stringify(data))\n\n    } catch (error) {\n        dispatch({\n            type: USER_LOGIN_FAIL,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message,\n        })\n    }\n}\n\nexport const logout = () => (dispatch) => {\n    localStorage.removeItem('userInfo')\n    dispatch({ type: USER_DETAILS_RESET })\n    dispatch({ type: USER_LOGOUT })\n}\n\nexport const register = (name, email, password) => async (dispatch) => {\n    try {\n        dispatch({\n            type: USER_REGISTER_REQUEST\n        })\n\n        const config = {\n            headers: {\n                'Content-type': 'application/json'\n            }\n        }\n\n        const { data } = await axios.post(\n            '/api/users/register/',\n            { 'name': name, 'email': email, 'password': password },\n            config\n        )\n\n        dispatch({\n            type: USER_REGISTER_SUCCESS,\n            payload: data\n        })\n\n        dispatch({\n            type: USER_LOGIN_SUCCESS,\n            payload: data\n        }) \n\n        localStorage.setItem('userInfo', JSON.stringify(data))\n\n    } catch (error) {\n        dispatch({\n            type: USER_REGISTER_FAIL,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message,\n        })\n    }\n}\n\n        \nexport const getUserDetails = (id) => async (dispatch, getState) => {\n    try {\n        dispatch({\n            type: USER_DETAILS_REQUEST\n        })\n\n        const {\n            userLogin: { userInfo },\n        } = getState() //Like useSelector, getState is a function that returns the current state tree of your application. It is equal to the last value returned by the store's reducer.\n\n        const config = {\n            headers: { //headers is an object that contains the headers of the request\n                'Content-type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}` \n            }\n        }\n\n        const { data } = await axios.get(\n            `/api/users/${id}/`,\n            config\n        )\n\n        dispatch({\n            type: USER_DETAILS_SUCCESS,\n            payload: data\n        })\n\n\n    } catch (error) {\n        dispatch({\n            type: USER_DETAILS_FAIL,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message,\n        })\n    }\n}\n\nexport const updateUserProfile = (user) => async (dispatch, getState) => {\n    try {\n        dispatch({\n            type: USER_UPDATE_PROFILE_REQUEST\n        })\n\n        const {\n            userLogin: { userInfo },\n        } = getState()\n\n        const config = {\n            headers: {\n                'Content-type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        }\n\n        const { data } = await axios.put(\n            `/api/users/profile/update/`,\n            user,\n            config\n        )\n\n        dispatch({\n            type: USER_UPDATE_PROFILE_SUCCESS,\n            payload: data\n        })\n\n        dispatch({\n            type: USER_LOGIN_SUCCESS,\n            payload: data\n        })\n\n        localStorage.setItem('userInfo', JSON.stringify(data))\n\n    } catch (error) { \n        dispatch({\n            type: USER_UPDATE_PROFILE_FAIL,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message,\n        })\n    }\n}\n","/Users/jacoblim/Desktop/HawkHub/frontend/src/components/Message.js",[],[],"/Users/jacoblim/Desktop/HawkHub/frontend/src/constants/userConstants.js",[],[],"/Users/jacoblim/Desktop/HawkHub/frontend/src/components/Sidebar.js",[],[],{"ruleId":"98","severity":1,"message":"99","line":2,"column":10,"nodeType":"100","messageId":"101","endLine":2,"endColumn":14},{"ruleId":"98","severity":1,"message":"102","line":3,"column":34,"nodeType":"100","messageId":"101","endLine":3,"endColumn":39},{"ruleId":"98","severity":1,"message":"103","line":4,"column":10,"nodeType":"100","messageId":"101","endLine":4,"endColumn":23},{"ruleId":"104","severity":1,"message":"105","line":11,"column":24,"nodeType":"106","messageId":"107","endLine":11,"endColumn":27},{"ruleId":"108","severity":1,"message":"109","line":43,"column":8,"nodeType":"110","endLine":43,"endColumn":44,"suggestions":"111"},{"ruleId":"112","severity":1,"message":"113","line":48,"column":22,"nodeType":"114","messageId":"107","endLine":48,"endColumn":24},{"ruleId":"98","severity":1,"message":"115","line":8,"column":10,"nodeType":"100","messageId":"101","endLine":8,"endColumn":15},{"ruleId":"104","severity":1,"message":"105","line":10,"column":25,"nodeType":"106","messageId":"107","endLine":10,"endColumn":28},{"ruleId":"112","severity":1,"message":"113","line":35,"column":22,"nodeType":"114","messageId":"107","endLine":35,"endColumn":24},{"ruleId":"98","severity":1,"message":"116","line":3,"column":47,"nodeType":"100","messageId":"101","endLine":3,"endColumn":56},{"ruleId":"98","severity":1,"message":"117","line":3,"column":58,"nodeType":"100","messageId":"101","endLine":3,"endColumn":68},{"ruleId":"98","severity":1,"message":"118","line":22,"column":5,"nodeType":"100","messageId":"101","endLine":22,"endColumn":30},"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'Table' is defined but never used.","'LinkContainer' is defined but never used.","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'success'. Either include it or remove the dependency array.","ArrayExpression",["119"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","'login' is defined but never used.","'Container' is defined but never used.","'IconButton' is defined but never used.","'USER_UPDATE_PROFILE_RESET' is defined but never used.",{"desc":"120","fix":"121"},"Update the dependencies array to be: [dispatch, navigate, userInfo, user, success]",{"range":"122","text":"123"},[1571,1607],"[dispatch, navigate, userInfo, user, success]"]